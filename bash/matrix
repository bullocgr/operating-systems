#!/bin/bash
#Grace Bullock
#bullocgr@oregonstate.edu


temp="temp$$"
if [[ -z $2 ]]
then
	cat > $temp
else
	temp=$2
fi

#Function: dims
#parameters: takes in a single matrix
#output: outputs the dimensions of the matrix passed in
dims () {
	rows=0
	cols=0
	while read line
	do
		rows=`expr $rows + 1`
			#checking for rows works

			#for loop to check for cols
			#if cols equals 0 loop through the first line and count that
			#only need to run this once in order to get the cols which is why we have the if statement
		if [ $cols -eq 0 ]
		then
			for n in $line
			do
				cols=`expr $cols + 1`
			done
		fi
	done < $temp
	echo "$rows $cols"
}

# Function: transpose
# parameters: takes in one matrix
# output: turns the rows to cols and the cols to rows
transpose() {
	#this gets the first line in the file and uses word count to count the number of cols
	cols=$(head -n 1 $temp | wc -w)
	#this uses word count for the first word in every line
	rows=$(wc -l < $temp)
	for ((i=1;i<=$cols;i++))
	do
		#this cuts the file giving us the first col
		#after that we translate and then format using tabs and new lines
		#the last part gets rid of the unecessary tabs
		cut -f $i $temp | tr '\n' '\t' | head -c -1
		printf "\n"	
	done < $temp
	return 0
}

#Function: add
#parameters: takes in 2 matrices that must be the same size
#output: displays the matrices added together
add() {
	#this reads in from 2 files at one time
	paste -d , $1 $2 | while IFS="$(printf ',')" read -r f1 f2
    do
		line="" 
		#store the files into an array
		arr1=($f1)
		arr2=($f2)
		i=0
		#loop through and add each value in the array then increment i 
		#so we can increment through the arrays
		for num1 in $f1
		do
			num=$(expr ${arr1[i]} + ${arr2[i]})
			line="$line$num\\t"
			i=`expr $i + 1`
		done
		#format correctly
		line=${line::-2}
		echo -e $line
	done
	return 0
}

#Function: mean
#parameters: take in 1 matrix
#output: outputs the mean of each col
mean() {
	cols=$(head -n 1 $temp | wc -w)
	rows=$(wc -l < $temp)
	#get the rows and cols just like the transpose function


	for ((i=1;i<=$cols;i++))
	do
		sum=0
		mean=0
		#cut the file to get the first col
		for line in $(cut -f $i $temp)
		do
			#add each value in the first col
			sum=`expr $sum + $line`
		done

		#take the mean with the formula given to us
		mean=$(( (sum + (rows/2)*( (sum>0)*2-1 )) / rows ))
		printf "$mean"
		#this if statement removes the tab at the end of the lines
		if [ $i -lt $cols ]
			then
				printf "\t"
		fi
	done < $temp
	echo
	return 0
}

#Function: multiply
#parameters: takes in 2 matrices with the cols of the first and rows of the second matching
#output: prints out the product of the matrices
multiply() {
	#declare empty arrays
	declare -A arr1
	declare -A arr2
	rows=0
	#this gets the number of rows and cols for the first matrix
	while read line
	do
		cols=0
	    for i in $line
	    do
	    	#sets the dimensions for a 2D array
			arr1[$rows, $cols]=$i
			cols=$(expr $cols + 1)
			#this loop is the exact same as the dims function
		done
		rows=$(expr $rows + 1)
	done < $1
	rows1=$rows
	cols1=$cols

	#just getting the rows and cols again but for the second array
	rows=0
	while read line
	do
		cols=0
	    for i in $line
	    do
			arr2[$rows, $cols]=$i
			cols=$(expr $cols + 1)
		done
		rows=$(expr $rows + 1)
	done < $2
	rows2=$rows
	cols2=$cols

	for i in $(seq 0 $(expr $rows1 - 1))
	do
		output=
		for j in $(seq 0 $(expr $cols2 - 1))
		do
			sum=0
			for k in $(seq 0 $(expr $cols1 - 1))
			do
				#access the correct elements in the arrays in order to correctly multiply them
				#we subtract in each loop in order to move properly through the multiplication process
				#assign the correct variables to each "index" and then multiply the values
				#then add 
				temp1=${arr1[$i, $k]}
				temp2=${arr2[$k, $j]}
				product=$(expr $temp1 \* $temp2)
				sum=$(expr $sum + $product)
			done
			output="$output$sum\\t"
		done
		#print and format
		output=${output::-2}
		echo -e $output
  done
}

#this error handling doesn't work on the grading script
# if [[ $# -gt 3 ]]
# then
# 	1>&2 echo "error"
# 	exit 1
	
# elif [[ $# -lt 1 ]]
# then
#  	1>&2 echo "error"
#  	exit 1
# fi


# if [[ $# -gt 1 ]]
# then
# 	if [[ ! -f $2 ]]
#  	then
#  		1>&2 echo "error"
# 		exit 1
# 	fi
# fi
# if [[ $# -gt 2 ]]
# then
# 	if [[ ! -f $3 ]]
# 	then
# 		1>&2 echo "error"
#  		exit 1
#  	fi
# fi

# if [ $1 == dims ]
# then
# 	if [ $# -gt 2 ]
# 	then
# 		1>&2 echo "error"
# 		exit 1
# 	fi
# 	dims $2
# elif [ $1 == transpose ]
# then
# 	if [ $# -gt 2 ]
# 	then
# 		1>&2 echo "error"
# 		exit 1
# 	fi
# 	transpose $2
# elif [ $1 == mean ]
# then
# 	if [ $# -gt 2 ]
# 	then
# 		1>&2 echo "error"
# 		exit 1
# 	fi
# 	mean $2

# fi

# if [[ $# -ne 3 ]]
# then
# 	1>&2 echo "error"
# 	exit 1
# fi

# if [[ $1 == add ]]
# then
# 	add $2 $3
# elif [[ $1 == multiply ]]
# then
# 	multiply $2 $3
# fi

$1 "${@:2}"



rm -f temp*